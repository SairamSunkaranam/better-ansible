---
# Configure the database for the application

- name: configure postgres database
  gather_facts: false
  become: true
  hosts: appdbs
  tasks:

  - name: enable postgres to listen externally (default is localhost)
    lineinfile:
      path: /var/lib/pgsql/data/postgresql.conf
      regexp: "^listen_addresses='*'"
      line: "listen_addresses='*'"

  - name: enable postgres to authenticate remote users
    lineinfile:
      path: /var/lib/pgsql/data/pg_hba.conf
      regexp: "^host"
      line: "host    all             all             all                     md5"

# make this a handler!

  - name: restart postgres - after reconfiguration
    service:
      name: postgresql.service
      state: restarted

  - name: install python-psycopg2 module on target - python postgres adapter
    yum:
      name: python-psycopg2
      state: latest

  # - name: create ansible_books database
  #   postgresql_db:
  #     name: ansible_books
  #     state: present
  #     login_user: postgres
  #   become: yes
  #   become_user: postgres
  #   tags: create_database

  - name: copy sql scripts to host
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      mode: 0400
      owner: postgres
    with_items:
      - { src: ./sql/password.sql, dest: /tmp/password.sql }
      - { src: ./sql/create_table.sql, dest: /tmp/create_table.sql }
      - { src: ./sql/populate_table.sql, dest: /tmp/populate_table.sql }
    tags:
      - copy_sql_scripts

  - block:

    - name: setup postgres database and authentication
      # command: psql -d ansible_books -f {{ item }}
      command: psql -d postgres -f {{ item }}
      with_items:
        - "/tmp/password.sql"
        - "/tmp/create_table.sql"
        - "/tmp/populate_table.sql"
      become: yes
      become_user: postgres
      tags:
        - create_postgres_database

#TODO: 2) Scripts should be read only postgres users
#TODO: 3) Delete scripts after execution
#TODO: 4) Use ansible vault and templates for password.sql
